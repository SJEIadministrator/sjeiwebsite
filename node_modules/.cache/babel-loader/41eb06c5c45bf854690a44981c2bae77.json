{"ast":null,"code":"var _jsxFileName = \"/Users/riteshgupta/Desktop/sjeiwebsite/src/components/Tabs.js\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport { childrenPropType, onSelectPropType, selectedIndexPropType } from \"./helpers/propTypes\";\nimport UncontrolledTabs from \"./UncontrolledTabs\";\nimport { getTabsCount } from \"./helpers/count\";\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\nexport default class Tabs extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSelected = (index, last, event) => {\n      const {\n        onSelect\n      } = this.props;\n      const {\n        mode\n      } = this.state; // Call change event handler\n\n      if (typeof onSelect === \"function\") {\n        // Check if the change event handler cancels the tab change\n        if (onSelect(index, last, event) === false) return;\n      }\n\n      const state = {\n        // Set focus if the change was triggered from the keyboard\n        focus: event.type === \"keydown\"\n      };\n\n      if (mode === MODE_UNCONTROLLED) {\n        // Update selected index\n        state.selectedIndex = index;\n      }\n\n      this.setState(state);\n    };\n\n    this.state = Tabs.copyPropsToState(this.props, {}, props.defaultFocus);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return Tabs.copyPropsToState(props, state);\n  }\n\n  static getModeFromProps(props) {\n    return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n  }\n\n  // preserve the existing selectedIndex from state.\n  // If the state has not selectedIndex, default to the defaultIndex or 0\n  static copyPropsToState(props, state, focus = false) {\n    if (process.env.NODE_ENV !== \"production\" && state.mode !== undefined && state.mode !== Tabs.getModeFromProps(props)) {\n      throw new Error(`Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see the README.`);\n    }\n\n    const newState = {\n      focus,\n      mode: Tabs.getModeFromProps(props)\n    };\n\n    if (newState.mode === MODE_UNCONTROLLED) {\n      const maxTabIndex = getTabsCount(props.children) - 1;\n      let selectedIndex = null;\n\n      if (state.selectedIndex != null) {\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\n      } else {\n        selectedIndex = props.defaultIndex || 0;\n      }\n\n      newState.selectedIndex = selectedIndex;\n    }\n\n    return newState;\n  }\n\n  render() {\n    const {\n      children,\n      defaultIndex,\n      defaultFocus,\n      ...props\n    } = this.props;\n    const {\n      focus,\n      selectedIndex\n    } = this.state;\n    props.focus = focus;\n    props.onSelect = this.handleSelected;\n\n    if (selectedIndex != null) {\n      props.selectedIndex = selectedIndex;\n    }\n\n    return /*#__PURE__*/React.createElement(UncontrolledTabs, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 12\n      }\n    }), children);\n  }\n\n}\nTabs.defaultProps = {\n  defaultFocus: false,\n  forceRenderTabPanel: false,\n  selectedIndex: null,\n  defaultIndex: null\n};\nTabs.propTypes = {\n  children: childrenPropType,\n  direction: PropTypes.oneOf([\"rtl\", \"ltr\"]),\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  defaultFocus: PropTypes.bool,\n  defaultIndex: PropTypes.number,\n  disabledTabClassName: PropTypes.string,\n  domRef: PropTypes.func,\n  forceRenderTabPanel: PropTypes.bool,\n  onSelect: onSelectPropType,\n  selectedIndex: selectedIndexPropType,\n  selectedTabClassName: PropTypes.string,\n  selectedTabPanelClassName: PropTypes.string\n};\nTabs.tabsRole = \"Tabs\";","map":{"version":3,"sources":["/Users/riteshgupta/Desktop/sjeiwebsite/src/components/Tabs.js"],"names":["PropTypes","React","Component","childrenPropType","onSelectPropType","selectedIndexPropType","UncontrolledTabs","getTabsCount","MODE_CONTROLLED","MODE_UNCONTROLLED","Tabs","constructor","props","handleSelected","index","last","event","onSelect","mode","state","focus","type","selectedIndex","setState","copyPropsToState","defaultFocus","getDerivedStateFromProps","getModeFromProps","process","env","NODE_ENV","undefined","Error","newState","maxTabIndex","children","Math","min","defaultIndex","render","defaultProps","forceRenderTabPanel","propTypes","direction","oneOf","className","oneOfType","string","array","object","bool","number","disabledTabClassName","domRef","func","selectedTabClassName","selectedTabPanelClassName","tabsRole"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport {\n  childrenPropType,\n  onSelectPropType,\n  selectedIndexPropType\n} from \"./helpers/propTypes\";\nimport UncontrolledTabs from \"./UncontrolledTabs\";\nimport { getTabsCount } from \"./helpers/count\";\n\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\n\nexport default class Tabs extends Component {\n  static defaultProps = {\n    defaultFocus: false,\n    forceRenderTabPanel: false,\n    selectedIndex: null,\n    defaultIndex: null\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    direction: PropTypes.oneOf([\"rtl\", \"ltr\"]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object\n    ]),\n    defaultFocus: PropTypes.bool,\n    defaultIndex: PropTypes.number,\n    disabledTabClassName: PropTypes.string,\n    domRef: PropTypes.func,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: onSelectPropType,\n    selectedIndex: selectedIndexPropType,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = Tabs.copyPropsToState(this.props, {}, props.defaultFocus);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return Tabs.copyPropsToState(props, state);\n  }\n\n  static getModeFromProps(props) {\n    return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n  }\n\n  handleSelected = (index, last, event) => {\n    const { onSelect } = this.props;\n    const { mode } = this.state;\n\n    // Call change event handler\n    if (typeof onSelect === \"function\") {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    }\n\n    const state = {\n      // Set focus if the change was triggered from the keyboard\n      focus: event.type === \"keydown\"\n    };\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      state.selectedIndex = index;\n    }\n\n    this.setState(state);\n  };\n\n  // preserve the existing selectedIndex from state.\n  // If the state has not selectedIndex, default to the defaultIndex or 0\n  static copyPropsToState(props, state, focus = false) {\n    if (\n      process.env.NODE_ENV !== \"production\" &&\n      state.mode !== undefined &&\n      state.mode !== Tabs.getModeFromProps(props)\n    ) {\n      throw new Error(\n        `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see the README.`\n      );\n    }\n\n    const newState = {\n      focus,\n      mode: Tabs.getModeFromProps(props)\n    };\n\n    if (newState.mode === MODE_UNCONTROLLED) {\n      const maxTabIndex = getTabsCount(props.children) - 1;\n      let selectedIndex = null;\n\n      if (state.selectedIndex != null) {\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\n      } else {\n        selectedIndex = props.defaultIndex || 0;\n      }\n      newState.selectedIndex = selectedIndex;\n    }\n\n    return newState;\n  }\n\n  render() {\n    const { children, defaultIndex, defaultFocus, ...props } = this.props;\n    const { focus, selectedIndex } = this.state;\n\n    props.focus = focus;\n    props.onSelect = this.handleSelected;\n\n    if (selectedIndex != null) {\n      props.selectedIndex = selectedIndex;\n    }\n\n    return <UncontrolledTabs {...props}>{children}</UncontrolledTabs>;\n  }\n}\n\nTabs.tabsRole = \"Tabs\";\n"]},"metadata":{},"sourceType":"module"}